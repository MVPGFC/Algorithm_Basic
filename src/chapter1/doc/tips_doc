java中list.get(i)是一个一个从左开始数的，所以复杂度是O(N);
选择排序时间复杂度O(N^2)
冒泡排序时间复杂度O(N^2)
插入排序的时间复杂度和数据状态有关系，最好情况排好序的为O(N),最差情况逆序为O(N^2),但是复杂度是以最查情况为结果，即O(N^2)
如果要选择一个时间复杂度为O(N^2)的排序，插入排序仅仅是在常数上"可能"省时，具体的跟数据状态有关系

有序数组找到某个数，二分，时间复杂度O(logN)
有序数组找到某个大于等于某个数的最左侧，时间复杂度O(logN)
局部最小问题：
    数组无序且相邻不等，找到一个局部最小即可，仍然使用二分，依靠趋势

对数器

master公式：
    当递归问题为T(N) = aT(N/b) + O(N^d)，其中a,b,d都为常数

求中点(L+R)/2可能会越界，因为L+R会超过int范围，
第一步改良：L+(R-L)/2
第二步改良：L+(R-L)>>1