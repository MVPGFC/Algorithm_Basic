两个单链表相交的一系列问题
【题目】
给定两个可能有环也可能无环的单链表，头节点head1和head2。
请实现一个函数，如果两个链表相交，请返回相交的第一个节点。如果不相交，返回null 

【要求】
如果两个链表长度之和为N，时间复杂度请达到O(N)，额外空间复杂度 请达到O(1)。

【笔记】
笔试面试区别对待，笔试时间紧，系统判断只判断结果，对时间复杂度合格即可ac，故可用简易代码，善用hashset和hashmap；
而面试需要更有街，就可以用快慢指针的思想，不占用额外空间去实现。

1）如何判断一个单链表是否有环
	思路一：
		使用hashset，hashset是一个集合，集合就意味着没有重复，且对于非基础数据类型的元素，hashset中是保存的对象地址，引用传递，这样就可以遍历链表，将每个节点put到set中，如果即将要put的节点在set中已经存在，那么这个点就是环的入环节点。
	思路二：
		设立快慢指针，首先要知道单链表成环至少需要三个节点，所以一个或者两个节点不可能有环。对于三个及三个以上节点构成的单链表，初始设置快指针位置在head.next.next(即第三个节点)，慢指针位置在head.next(即第二个节点)，快指针每次前进两位，慢指针每次前进一位
		情况一：
			若无环，快指针一定到null，也就是说只要快指针走到null，那么可判断无环
		情况二：
			快慢指针重合，必有环。此时记录快慢指针重合的位置，然后设置两个指针，一个指向刚才快慢指针的重合点，一个回到head节点，然后两指针每次都前进一位，这俩指针再次重合时，即入环点。
2）分析两个链表形态
	两个单链表无环：
		如果相交，则必然是Y字形(包括V字形)，这就决定了俩链表的end节点相同，故遍历两个链表找到各自的end节点，如果equals为true，则相交。如果为false，则不相交。
		那么如何找到相交节点呢，就是长的那个链表，指针从两链表长度差值的位置开始走，短的那个指针从头开始走，当两指针指向的节点为同一个节点，则就是所求相交节点。
	一个无环一个有环：
		不可能的形态
	两个有环的单链表：
		情况一：
			俩个各自成环，但不相交，判断方法也很简单，就是1)中的返回，俩入环节点不同，则必不相交
		情况二：
			环外相交，去掉环就成了Y或者V型，仍然1)，俩入环节点相同，那么记录入环节点为end，然后处理方法等同于俩无环单链表相交的处理方式
		情况三：
			环上相交，o=型，1)返回俩个入环节点，其中从一个入环节点接着走，如果能走到另一个的入环节点，就是这种情况，返回任意一个入环节点都行。